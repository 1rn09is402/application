pipeline {
    
    agent any
    
    parameters{
        choice(name: 'action', choices: 'create\ndestroy', description: 'Create/update or destroy the Deployment & SVC.')
        string(name: 'cluster', defaultValue : 'EKS', description: "EKS cluster name.")
        string(name: 'region', defaultValue : 'us-east-1', description: "AWS region.")
        //string(name: 'FROM_BUILD', defaultValue: '', description: 'Build Source'  )
        booleanParam(name: 'IS_READY', defaultValue: false , description: 'IS Ready for Prod ?'  )
    }
      environment {

        ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
        SECRET_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }
    
    stages{
        
        stage('Git CheckOut')
        {
            steps{
               echo "Deploying from source ${params.FROM_BUILD}"
               git branch: 'main', url: 'https://github.com/vikash-kumar01/SpringBoot_Counter_Application.git'
            }
        }
        
        stage('Docker Image Build'){
            steps{
               sh 'docker image build -t $JOB_NAME:v1.$BUILD_ID .'
          }
        }
        
        stage('Docker Image tagging'){
            steps{
               sh 'docker image tag $JOB_NAME:v1.$BUILD_ID vikashashoke/$JOB_NAME:v1.$BUILD_ID'
               sh 'docker image tag $JOB_NAME:v1.$BUILD_ID vikashashoke/$JOB_NAME:latest'
            }
        }
        stage('Push ecr image to dockerHub'){
             steps{
                 withCredentials([string(credentialsId: 'dockerhub_cred', variable: 'dockerhub_passwd')]) {
                            sh "docker login -u vikashashoke -p ${dockerhub_passwd}" 
                            sh 'docker image push vikashashoke/$JOB_NAME:v1.$BUILD_ID'
                            sh 'docker image push vikashashoke/$JOB_NAME:latest'
                }
             }
        }
        stage('Remove local Docker Image Version'){
             steps{
               sh 'docker image rm vikashashoke/$JOB_NAME:v1.$BUILD_ID'
               sh 'docker image rm vikashashoke/$JOB_NAME:latest'
             }
        }
        stage('Connection to cluster'){
            steps{
                sh """
                aws configure set aws_access_key_id "$ACCESS_KEY"
                aws configure set aws_secret_access_key "$SECRET_KEY"
                aws configure set region "${params.region}"
                
                aws eks update-kubeconfig --name ${params.cluster} --region ${params.region}
                """
            }
        }
        stage('Deployment on Eks Cluster'){
             when {
              expression { params.action == 'create' }
          }
             steps{
               sh """
                 kubectl apply -f Deployment.yml
                 kubectl apply -f Service.yml
               """
             }
        }
        stage('Delete Deployment on Eks Cluster'){
             when {
               expression { params.action == 'destroy' }
             }
             steps{
               sh """
                 kubectl delete -f Deployment.yml
                 kubectl delete -f Service.yml
               """
             }
        }
    }
}
